name: CI
on:
#drrrrsparar el pipeline de forma manual
  workflow_dispatch:
  push:
    branches: [ wanderlust ]
    #solo si los cambios se ejcutan en la carpeta frontend
    # paths:
    #   - 'frontend/**'
env:
  REGISTRY: roxsross12
  REPOSITORY: wanderlust
  VERSION: v1
  TELEGRAM_CHAT_ID: "-1001508340482"
    
jobs:
  ci-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.1.0
        with: 
          node-version: '21'
      - name: Install dependencies & unit test
        working-directory: frontend
        run: | 
          npm install
          npm run test
        continue-on-error: true
        
  cd-frontend:
    runs-on: arc-runner-set
    needs: [ci-frontend, cd-backend]
    steps:
      - uses: actions/checkout@v4
#       ## permiso a script
#       - name: Setup notification script
#         run: |
#             mkdir -p scripts
#             cp .github/scripts/notify.sh scripts/
#             chmod +x scripts/notify.sh
#             ls -la scripts/notify.sh
#       - name: Info repo
#         working-directory: frontend
#         run: 
#           |
#             VERSION=$(jq -r '.version' ./package.json)
#             echo "VERSION=$VERSION" >> $GITHUB_ENV
#             echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
#             echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV  

#       - uses: docker/login-action@v3.3.0
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - uses: docker/setup-qemu-action@v3.2.0
#       - uses: docker/setup-buildx-action@v3.7.1

# ###notify
#       - name: Send Start Notification
#         if: success()
#         env:
#           BOT_URL: "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
#         run: |
#           export BOT_URL="${BOT_URL}"
#           bash scripts/notify.sh "start" "${{ env.VERSION }}" "${{ env.COMMIT_SHA }}" "${{ env.BUILD_DATE }}"

#       - name: Docker build
#         working-directory: frontend
#         run: |
#           docker build -t $REGISTRY/$REPOSITORY:frontend-$VERSION .
#           docker push $REGISTRY/$REPOSITORY:frontend-$VERSION
#### deploy kubernetes
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0
        with:
          version: 'latest'
      - name: lista nodos
        run: kubectl get nodes -A
      - name: deploy frontend
        run: |
          kubectl apply -f kubernetes/frontend.yaml
        
  ci-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: primer paso correr script
        run: echo Hello, world!
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.1.0
        with: 
          node-version: '21'
      - name: Install dependencies
        run: | 
          cd backend
          npm install          
      - name: run test
        run: | 
          cd backend
          npm run test
          
  cd-backend:
    runs-on: arc-runner-set
    needs: [ci-backend]
    steps:
      - uses: actions/checkout@v4          
      # - uses: docker/login-action@v3.3.0
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - uses: docker/setup-qemu-action@v3.2.0
      # - uses: docker/setup-buildx-action@v3.7.1
      # - name: Docker build
      #   run: |
      #     cd backend
      #     docker build -t $REGISTRY/$REPOSITORY:backend-$VERSION .
      #     docker push $REGISTRY/$REPOSITORY:backend-$VERSION
#### deploy kubernetes
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0
        with:
          version: 'latest'
      - name: lista nodos
        run: kubectl get nodes -A
      - name: deploy backend
        run: |
          kubectl apply -f kubernetes/mongodb.yaml   
          kubectl apply -f kubernetes/redis.yaml  
          kubectl apply -f kubernetes/backend.yaml
  notify:
    runs-on: ubuntu-latest
    needs: [cd-backend, cd-frontend]
    steps:
      - uses: actions/checkout@v4          
      - name: script notify
        run: echo correr script
