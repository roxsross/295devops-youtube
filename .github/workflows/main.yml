name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches: [ wanderlust ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'kubernetes/**'

env:
  REGISTRY: roxsross12
  REPOSITORY: wanderlust
  TELEGRAM_CHAT_ID: "-1001508340482"

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate version
        id: get_version
        run: |
          # Obtener fecha actual en formato YYYYMMDD
          DATE=$(date +'%Y%m%d')
          # Obtener número de commit corto
          COMMIT_SHA=$(git rev-parse --short HEAD)
          # Número de commits en el día
          DAILY_BUILD=$(git rev-list --count HEAD --since="midnight")
          # Crear versión con formato YYYYMMDD.BUILD.COMMIT
          VERSION="${DATE}.${DAILY_BUILD}.${COMMIT_SHA}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Versión generada: ${VERSION}"

  ci-frontend:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.1.0
        with: 
          node-version: '21'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies & run tests
        working-directory: frontend
        run: | 
          npm ci
          npm run test
        continue-on-error: true

  ci-backend:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.1.0
        with: 
          node-version: '21'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies & run tests
        working-directory: backend
        run: | 
          npm ci
          npm run test

  build-and-push:
    needs: [version, ci-frontend, ci-backend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-buildcache,mode=max
          build-args: |
            VERSION=${{ needs.version.outputs.version }}

  deploy:
    needs: [version, build-and-push]
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup notification script
        run: |
          mkdir -p scripts
          cp .github/scripts/notify.sh scripts/
          chmod +x scripts/notify.sh
          
      - name: Install kubectl
        uses: Azure/setup-kubectl@v4.0.0
        with:
          version: 'latest'
          
      - name: Update kubernetes manifests
        run: |
          # Actualizar tags de imágenes en los archivos de deployment
          sed -i "s|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:frontend-.*|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:frontend-${{ needs.version.outputs.version }}|" kubernetes/frontend.yaml
          sed -i "s|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:backend-.*|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:backend-${{ needs.version.outputs.version }}|" kubernetes/backend.yaml
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/mongodb.yaml
          kubectl apply -f kubernetes/redis.yaml
          kubectl apply -f kubernetes/backend.yaml
          kubectl apply -f kubernetes/frontend.yaml
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend
          kubectl rollout status deployment/backend
          
      - name: Notify deployment status
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          VERSION: ${{ needs.version.outputs.version }}
        run: ./scripts/notify.sh

      - name: Create Git tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.version.outputs.version }} -m "Release v${{ needs.version.outputs.version }}"
          git push origin v${{ needs.version.outputs.version }}