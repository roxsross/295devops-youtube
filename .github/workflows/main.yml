# .github/workflows/ci-cd.yaml
name: CI/CD Pipeline
on:
  push:
    branches: [ wanderlust, main ]

env:
  REGISTRY: roxsross12
  REPOSITORY: wanderlust
  TELEGRAM_CHAT_ID: "-1001508340482"
  BOT_URL: "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
  NODE_VERSION: '21'
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      commit_sha: ${{ steps.get_version.outputs.commit_sha }}
      build_date: ${{ steps.get_version.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate version
        id: get_version
        run: |
          DATE=$(date +'%Y%m%d')
          COMMIT_SHA=$(git rev-parse --short HEAD)
          DAILY_BUILD=$(git rev-list --count HEAD --since="midnight")
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version=${VERSION}-${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "Versi√≥n generada: ${VERSION}"

  ci-frontend:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: |
         npm ci
         npm run test
        continue-on-error: true
      

  ci-backend:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: backend
        run: |
         npm ci
         npm run test
        continue-on-error: true

  build-and-push:
    needs: [version, ci-frontend, ci-backend]
    runs-on: arc-runner-set
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ matrix.app }}-buildcache,mode=max
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
            BUILD_DATE=${{ needs.version.outputs.build_date }}
            COMMIT_SHA=${{ needs.version.outputs.commit_sha }}

  deploy:
    needs: [version, build-and-push]
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: Azure/setup-kubectl@v4
        
      - name: Update kubernetes manifests
        run: |
          for app in frontend backend; do
            sed -i "s|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${app}-.*|image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${app}-${{ needs.version.outputs.version }}|" kubernetes/${app}.yaml
          done
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/mongodb.yaml
          kubectl apply -f kubernetes/redis.yaml
          kubectl apply -f kubernetes/backend.yaml
          kubectl apply -f kubernetes/frontend.yaml
          
  notify:
    needs: [version, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Send result notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          VERSION: ${{ needs.version.outputs.version }}
          COMMIT_SHA: ${{ needs.version.outputs.commit_sha }}
          BUILD_DATE: ${{ needs.version.outputs.build_date }}
          STATUS: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
        run: |
          chmod +x .github/scripts/notify.sh
          .github/scripts/notify.sh "$STATUS" "$VERSION" "$COMMIT_SHA" "$BUILD_DATE"
